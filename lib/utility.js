const fs = require('fs');
const readline = require('readline');

function Utility(PAGE_SIZE){
  this.PAGE_SIZE = PAGE_SIZE?PAGE_SIZE:50;
}

/*Developer Documentation
 *
 * buildIndex() is used to generate the index array for the log file
 * before searching through them.
 * @param 'file' - path to the file to be read. Example of file - ./logs/example.txt
 * @param 'callback' - callback to handle the response once the file is read line-by-line.
 * The result of this method is the indexFile and the total length of the file in bytes.
 *  indexFile is an array of objects containing
 * 1. key: Epoch timestamp of the log
 * 2. position: start position of the line in bytes
 * 
 */

Utility.prototype.buildIndex = function(file,callback) {
    let obj = {};
    let position = -1;
    const indexFile = [];
    let totalLines = 0;
  
    try {
      const rl = readline.createInterface({
        input: fs.createReadStream(file),
        crlfDelay: Infinity
      });
  
      rl.on('line', (line) => {
        const lineLength = line.length + 1;
        totalLines = totalLines + 1;

        obj = {
          key: new Date(line.split(" ")[0]).getTime(),
          position: position+1
        }
  
        position += lineLength;
        indexFile.push(obj);
      });
  
      rl.on('close', (line) => {
        callback(indexFile, totalLines);
      })
    } catch (err) {
      console.log(err);
      callback([], -1)
    }
}

/*Developer Documentation
 *
 * This assumes that the indexFile is available.
 * searchIndex() implements a simple binary search on the indexFile generated by buildIndex()
 * It takes 5 params.
 * @param 'indexFile': array generated by buildIndex(). Required.
 * @param 'ele': Timestamp in epoch
 * @param 'start': Start position of the line
 * @param 'end': End position of the line
 * @param 'lowerBoundRequired': Not mandatory. Required only for searching the end position as this flag allows us to look 
 * for the nearest lowest position if the 'end' is not found.
 * 
 * Example of the indexFile
 *  [{ key: 1577838038221, position: 4467 },
  { key: 1577838052979, position: 4538 },
  { key: 1577838055612, position: 4588 },
  { key: 1577838066553, position: 4638 },
  ,
  ,]
 */

Utility.prototype.searchIndex = function(indexFile, ele, start, end, lowerBoundRequired) {
    if (start > end) {
        return lowerBoundRequired ? end : start;
    }

    const mid = Math.floor((start + end)/2);

    if (!indexFile[mid]) {
        return -1;
    }

    if (indexFile[mid] && indexFile[mid].key == ele) {
        return mid;
    }

    if (indexFile[mid].key > ele) {
        return this.searchIndex(indexFile, ele, start, mid-1, lowerBoundRequired);
    } else {
        return this.searchIndex(indexFile, ele, mid+1, end, lowerBoundRequired);
    }
}

Utility.prototype.setFromPosition = function(fromDatePos,skip,totalLines){

  if ((fromDatePos + this.PAGE_SIZE * skip) < totalLines) {
    fromDatePos = fromDatePos + this.PAGE_SIZE * skip;
  } else {
    fromDatePos = fromDatePos + (totalLines - (this.PAGE_SIZE * skip));
  }

  return fromDatePos;
}

Utility.prototype.setToPosition = function(fromDatePos,toDatePos,totalLines){

  if ((fromDatePos + this.PAGE_SIZE) < totalLines) {
    toDatePos = fromDatePos + this.PAGE_SIZE;
  } else {
    toDatePos = totalLines - 1;
  };
  return toDatePos;
}

Utility.prototype.getDateInEpoch = function(date,setEndOfDay){
  
  date = new Date(date);
  date.setDate(date.getDate() + 1);

  return setEndOfDay
  ?new Date(new Date(date).setUTCHours(23,59,59,999)).getTime()
  // ?new Date(new Date(date).setUTCHours(0,25,1,999)).getTime()
  :new Date(new Date(date).setUTCHours(0,0,0,0)).getTime()
}

Utility.prototype.buildResponse = function(buffer,fromDatePosition,toDatePosition,totalLines){

  var logs = buffer.toString();
  logs = logs.split('\n')
  logs = logs.filter(function(log){
    return log != "";
  });

  return {
    // fromDatePosition:fromDatePosition,
    // toDatePosition:toDatePosition,
    // totalLines:totalLines,
    hasNextPage:toDatePosition+this.PAGE_SIZE>totalLines?false:true,
    hasPrevPage:fromDatePosition<=0?false:true,
    logs:logs
  }
}

module.exports = Utility;